{"version":3,"file":"static/js/900.4c53ec88.chunk.js","mappings":"mTAEAA,EAAAA,EAAAA,SAAAA,QAAyB,6BACzB,IAAMC,EAAU,2CAEHC,EAAiB,mCAAG,oGACRF,EAAAA,EAAAA,IAAA,wDAC4BC,IAFpB,cACzBE,EADyB,yBAIxBA,EAASC,KAAKC,SAJU,2CAAH,qDAOjBC,EAAqB,mCAAG,WAAMC,GAAN,uFACZP,EAAAA,EAAAA,IAAA,0BACFC,EADE,iCAC8BM,EAD9B,gCADY,cAC7BJ,EAD6B,yBAI5BA,EAASC,KAAKC,SAJc,2CAAH,sDAOrBG,EAAY,mCAAG,WAAMC,GAAN,uFACHT,EAAAA,EAAAA,IAAA,kBACVS,EADU,oBACIR,EADJ,2BADG,cACpBE,EADoB,yBAInBA,EAASC,KAAKC,SAJK,2CAAH,sDAMZK,EAAY,mCAAG,WAAMD,GAAN,uFACHT,EAAAA,EAAAA,IAAA,kBAAqBS,EAArB,YAA2BR,EAA3B,oBADG,cACpBE,EADoB,yBAEnBA,EAASC,MAFU,2CAAH,sDAKZO,EAAS,mCAAG,WAAMF,GAAN,uFACAT,EAAAA,EAAAA,IAAA,kBACVS,EADU,oBACIR,EADJ,oBADA,cACjBE,EADiB,yBAIhBA,EAASC,KAAKQ,MAJE,2CAAH,qD,iKC7BtB,EAA+B,2BAA/B,EAAsE,wBAAtE,EAA0G,wBAA1G,EAA+I,yBAA/I,EAAoL,wB,SCuEpL,EAjEa,WACX,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,MAAjC,eAAOH,EAAP,KAAaI,EAAb,KACA,GAAkCD,EAAAA,EAAAA,WAAS,GAA3C,eAAOE,EAAP,KAAkBC,EAAlB,KAsBA,OApBAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,gGAESN,EAFT,wDAMIK,GAAa,GANjB,UAO2BP,EAAAA,EAAAA,IAAUE,GAPrC,OAOUV,EAPV,OAQIa,EAAQb,GACRe,GAAa,GATjB,kDAWIE,QAAQC,IAAR,MAXJ,yBAaIH,GAAa,GAbjB,8EADc,uBAAC,WAAD,wBAiBdI,EACD,GAAE,CAACT,KAGF,qBAASU,UAAWC,EAApB,UACGP,IACC,SAAC,KAAD,CACEQ,SAAS,EACTC,OAAO,KACPC,MAAM,KACNC,UAAU,iBACVC,aAAc,CAAC,EACfC,aAAa,iBACbC,OAAQ,CAAC,UAAW,UAAW,UAAW,UAAW,cAGzD,eAAIR,UAAWC,EAAf,SACGZ,GACCA,EAAKoB,KAAI,SAAAC,GAAK,OACZ,gBAAmBV,UAAWC,EAA9B,UACGS,EAAMC,cACL,gBACEX,UAAWC,EACXW,IAAG,yCAAoCF,EAAMC,cAC7CE,IAAI,MAGN,gBACED,IAAKE,EACLD,IAAI,cACJb,UAAWC,KAGf,iBAAKD,UAAWC,EAAhB,WACE,uBAAIS,EAAMK,QACV,uCAAeL,EAAMM,kBAhBhBN,EAAMxB,GADH,QAwBvB,C","sources":["components/Api.js","webpack://react-homework-template/./src/components/Cast/Cast.module.css?c9ee","components/Cast/Cast.js"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org';\nconst API_Key = 'api_key=826a06ffcfa9fc5eee1fcd68c442c531';\n\nexport const FetchPopularFilms = async () => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/trending/all/day?${API_Key}`\n  );\n  return response.data.results;\n};\n\nexport const FetchSearchQueryFilms = async query => {\n  const response = await axios.get(\n    `/3/search/movie?${API_Key}&language=en-US&query=${query}&page=1&include_adult=false`\n  );\n  return response.data.results;\n};\n\nexport const FetchReviews = async id => {\n  const response = await axios.get(\n    `3/movie/${id}/reviews?${API_Key}&language=en-US&page=1`\n  );\n  return response.data.results;\n};\nexport const FetchDetails = async id => {\n  const response = await axios.get(`3/movie/${id}?${API_Key}&language=en-US`);\n  return response.data;\n};\n\nexport const FetchCast = async id => {\n  const response = await axios.get(\n    `3/movie/${id}/credits?${API_Key}&language=en-US`\n  );\n  return response.data.cast;\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"section-cast\":\"Cast_section-cast__Ubwi5\",\"cast-list\":\"Cast_cast-list__ond-A\",\"cast-item\":\"Cast_cast-item__6xvgR\",\"cast-image\":\"Cast_cast-image__Lf-J8\",\"box-actor\":\"Cast_box-actor__sUSrw\"};","import { FetchCast } from '../Api';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { ColorRing } from 'react-loader-spinner';\nimport placeHolder from '../../image/placeholder.jpg';\nimport css from './Cast.module.css';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    async function FetchData() {\n      try {\n        if (!movieId) {\n          return;\n        }\n\n        setIsLoading(true);\n        const response = await FetchCast(movieId);\n        setCast(response);\n        setIsLoading(false);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    FetchData();\n  }, [movieId]);\n\n  return (\n    <section className={css['section-cast']}>\n      {isLoading && (\n        <ColorRing\n          visible={true}\n          height=\"80\"\n          width=\"80\"\n          ariaLabel=\"blocks-loading\"\n          wrapperStyle={{}}\n          wrapperClass=\"blocks-wrapper\"\n          colors={['#e15b64', '#f47e60', '#f8b26a', '#abbd81', '#849b87']}\n        />\n      )}\n      <ul className={css['cast-list']}>\n        {cast &&\n          cast.map(actor => (\n            <li key={actor.id} className={css['cast-item']}>\n              {actor.profile_path ? (\n                <img\n                  className={css['cast-image']}\n                  src={`https://image.tmdb.org/t/p/w500${actor.profile_path}`}\n                  alt=\"\"\n                />\n              ) : (\n                <img\n                  src={placeHolder}\n                  alt=\"placeHolder\"\n                  className={css['cast-image']}\n                />\n              )}\n              <div className={css['box-actor']}>\n                <p>{actor.name}</p>\n                <p>Character: {actor.character}</p>\n              </div>\n            </li>\n          ))}\n      </ul>\n    </section>\n  );\n};\nexport default Cast;\n"],"names":["axios","API_Key","FetchPopularFilms","response","data","results","FetchSearchQueryFilms","query","FetchReviews","id","FetchDetails","FetchCast","cast","movieId","useParams","useState","setCast","isLoading","setIsLoading","useEffect","console","log","FetchData","className","css","visible","height","width","ariaLabel","wrapperStyle","wrapperClass","colors","map","actor","profile_path","src","alt","placeHolder","name","character"],"sourceRoot":""}